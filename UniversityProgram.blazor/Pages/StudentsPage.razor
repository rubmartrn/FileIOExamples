@page "/students"
@using Microsoft.AspNetCore.SignalR.Client
@using UniversityProgram.blazor.Apis
@using UniversityProgram.blazor.Models
@inject IStudentApi StudentApi

<PageTitle>Student</PageTitle>
<h3>StudentComponent</h3>
<h1>@message</h1>

@if (isLoading)
{
    <p>Loading..</p>
}
else if (Students.Count == 0)
{
    <p>Ուսանող չկար</p>
}
else
{
    <MudDataGrid T="StudentModel" Items="@Students" MultiSelection="false" SelectedItemChanged="SelectionChange">
        <Columns>
            <SelectColumn T="StudentModel" />
            <PropertyColumn Property="x => x.Id" Title="Nr" />
            <PropertyColumn Property="x => x.Email" />
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Money" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton onclick="async() => await DeleteAsync(context.Item.Id)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Delete</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudButton OnClick="OpenEditPage" Color="Color.Dark">Փոփոխել</MudButton>
    <MudButton OnClick="OpenStudent">Open</MudButton>
}

@code {


    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    private bool isLoading = true;
    public List<StudentModel> Students { get; set; } = new List<StudentModel>();
    private HubConnection? hubConnection;
    private string message = "";

    override protected async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
     .WithUrl("http://localhost:5260/studentHub")
     .WithAutomaticReconnect()
     .Build();

        hubConnection.On<string>("ReceiveMessage", async (m) =>
        {
            message = m;
            await GetStudents();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await GetStudents();
    }
    private StudentModel? Selected { get; set; }

    private async Task GetStudents()
    {
        Students = (await StudentApi.GetAll()).ToList();
        isLoading = false;
    }

    private async Task DeleteAsync(int id)
    {
        isLoading = true;
        await StudentApi.Delete(id);
        await GetStudents();
    }

    private void OpenEditPage()
    {
        if (Selected == null)
        {
            return;
        }
        NavigationManager.NavigateTo($"/student/edit/{Selected.Id}");
    }

    private void OpenStudent()
    {
        if (Selected == null)
        {
            return;
        }
        NavigationManager.NavigateTo($"/student/{Selected.Id}");
    }

    private void SelectionChange(StudentModel student)
    {
        Selected = student;
    }
}